from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.textinput import TextInput
from kivy.uix.button import Button
from kivy.uix.label import Label
from kivy.uix.screenmanager import ScreenManager, Screen
from kivymd.app import MDApp
from kivymd.uix.label import MDLabel
from kivymd.uix.button import MDFlatButton
from kivymd.uix.screen import MDScreen
from kivy.uix.scrollview import ScrollView
from kivy.uix.textinput import TextInput
from kivy.metrics import dp
from kivy.core.window import Window



from kivymd.uix.toolbar import MDTopAppBar # Import the MDToolbar for search bar
import sqlite3

# Database Manager
class DatabaseManager:
    def __init__(self, db_name):
        self.conn = sqlite3.connect(db_name)
        self.cursor = self.conn.cursor()
        self.create_tables()

    def create_tables(self):
        # Create table for user information
        self.cursor.execute('''CREATE TABLE IF NOT EXISTS users 
                               (id INTEGER PRIMARY KEY AUTOINCREMENT,
                                username TEXT UNIQUE,
                                password TEXT,
                                phone_number TEXT)''')

        # Create table for HOD profiles
        self.cursor.execute('''CREATE TABLE IF NOT EXISTS hod_profiles 
                               (id INTEGER PRIMARY KEY AUTOINCREMENT,
                                user_id INTEGER,
                                name TEXT,
                                department TEXT,
                                age INTEGER,
                                staff_id TEXT,
                                num_staffs INTEGER,
                                FOREIGN KEY(user_id) REFERENCES users(id))''')
        self.conn.commit()
    def authenticate_user(self, username, password):
        self.cursor.execute("SELECT * FROM users WHERE username=? AND password=?", (username, password))
        user = self.cursor.fetchone()
        if user:
            return True
        return False

    def register_user(self, username, password, phone_number):
        try:
            self.cursor.execute("INSERT INTO users (username, password, phone_number) VALUES (?, ?, ?)", 
                                (username, password, phone_number))
            self.conn.commit()
            return True
        except sqlite3.IntegrityError:
            return False

    def store_hod_profile(self, user_id, name, department, age, staff_id, num_staffs):
        try:
            self.cursor.execute("INSERT INTO hod_profiles (user_id, name, department, age, staff_id, num_staffs) VALUES (?, ?, ?, ?, ?, ?)", 
                                (user_id, name, department, age, staff_id, num_staffs))
            self.conn.commit()
            return True
        except sqlite3.IntegrityError:
            return False
    def get_phone_number(self, username):
        self.cursor.execute("SELECT phone_number FROM users WHERE username=?", (username,))
        result = self.cursor.fetchone()
        if result:
            return result[0]  # Return the phone number if found
        else:
            return None 

# Screens
class LoginScreen(MDScreen):
    def __init__(self, db_manager, **kwargs):
        super(LoginScreen, self).__init__(**kwargs)
        self.db_manager = db_manager

        self.username_field = TextInput(hint_text='Username', size_hint=(0.6, None), height=30)
        self.password_field = TextInput(hint_text='Password', password=True, size_hint=(0.6, None), height=30)
        self.login_button = Button(text='Login', size_hint=(0.6, None), height=30, on_press=self.login)
        self.register_button = Button(text='Register', size_hint=(0.6, None), height=30, on_press=self.go_to_registration)
        self.forgot_password_button = Button(text='Forgot Password', size_hint=(0.6, None), height=30, on_press=self.go_to_forgot_password)

        layout = BoxLayout(orientation='vertical', padding=20, spacing=10)
        layout.add_widget(self.username_field)
        layout.add_widget(self.password_field)
        layout.add_widget(self.login_button)
        layout.add_widget(self.register_button)
        layout.add_widget(self.forgot_password_button)

        self.add_widget(layout)

    def login(self, instance):
        username = self.username_field.text
        password = self.password_field.text
        if self.db_manager.authenticate_user(username, password):
            print("Login successful")
            self.manager.current = 'home'
        else:
            print("Invalid username or password")

    def go_to_registration(self, instance):
        self.manager.current = 'registration'

    def go_to_forgot_password(self, instance):
        self.manager.current = 'forgot_password'

class RegistrationScreen(MDScreen):
    def __init__(self, db_manager, **kwargs):
        super(RegistrationScreen, self).__init__(**kwargs)
        self.db_manager = db_manager

        self.username_field = TextInput(hint_text='Username', size_hint=(0.6, None), height=30)
        self.password_field = TextInput(hint_text='Password', password=True, size_hint=(0.6, None), height=30)
        self.confirm_password_field = TextInput(hint_text='Confirm Password', password=True, size_hint=(0.6, None), height=30)
        self.phone_number_field = TextInput(hint_text='Phone Number', size_hint=(0.6, None), height=30)
        self.register_button = Button(text='Register', size_hint=(0.6, None), height=30, on_press=self.register_user)
        self.go_back_button = Button(text='Go Back', size_hint=(0.6, None), height=30, on_press=self.go_back)

        layout = BoxLayout(orientation='vertical', padding=20, spacing=10)
        layout.add_widget(self.username_field)
        layout.add_widget(self.password_field)
        layout.add_widget(self.confirm_password_field)
        layout.add_widget(self.phone_number_field)
        layout.add_widget(self.register_button)
        layout.add_widget(self.go_back_button)
        
        self.add_widget(layout)

    def register_user(self, instance):
        username = self.username_field.text
        password = self.password_field.text
        confirm_password = self.confirm_password_field.text
        phone_number = self.phone_number_field.text
        if password == confirm_password:
            if self.db_manager.register_user(username, password, phone_number):
                print("Registration successful")
                self.manager.current = 'login'  # Navigate back to the login screen after registration
            else:
                print("Username already exists")
        else:
            print("Passwords do not match")

    def go_back(self, instance):
        self.manager.current = 'login'

class ForgotPasswordScreen(MDScreen):
    def __init__(self, db_manager, **kwargs):
        super(ForgotPasswordScreen, self).__init__(**kwargs)
        self.db_manager = db_manager

        self.username_field = TextInput(hint_text='Username', size_hint=(0.6, None), height=30)
        self.phone_number_field = TextInput(hint_text='Phone Number', size_hint=(0.6, None), height=30)
        self.recover_button = Button(text='Recover Password', size_hint=(0.6, None), height=30, on_press=self.recover_password)
        self.go_back_button = Button(text='Go Back', size_hint=(0.6, None), height=30, on_press=self.go_back)

        layout = BoxLayout(orientation='vertical', padding=20, spacing=10)
        layout.add_widget(self.username_field)
        layout.add_widget(self.phone_number_field)
        layout.add_widget(self.recover_button)
        layout.add_widget(self.go_back_button)
        
        self.add_widget(layout)

    def recover_password(self, instance):
        username = self.username_field.text
        phone_number = self.db_manager.get_phone_number(username)
        if phone_number:
            # Implement message sending logic here
            print(f'Temporary password sent to {phone_number}')
        else:
            print('Invalid username')
    def go_back(self, instance):
        self.manager.current = 'login'
from kivy.uix.gridlayout import GridLayout
from kivy.metrics import dp

from kivy.uix.boxlayout import BoxLayout
from kivymd.uix.toolbar import MDTopAppBar
from kivymd.uix.textfield import MDTextField
from kivymd.uix.button import MDIconButton
from kivy.metrics import dp
from kivymd.uix.button import MDIconButton, MDRaisedButton

from kivy.uix.label import Label
from kivy.uix.textinput import TextInput

from kivy.uix.gridlayout import GridLayout
from kivy.metrics import dp
from kivymd.uix.screen import MDScreen
from kivymd.uix.toolbar import MDTopAppBar
from kivymd.uix.label import MDLabel
from kivymd.uix.textfield import MDTextField
from kivymd.uix.button import MDRaisedButton

class HomeScreen(MDScreen):
    def __init__(self, db_manager,**kwargs):
        super(HomeScreen, self).__init__(**kwargs)
        
        self.db_manager = db_manager
        # Create top app bar with a title
        self.toolbar = MDTopAppBar(
            title="Home",
            elevation=10,
            background_palette="Primary",
            left_action_items=[["menu", lambda x: print("Menu button pressed")]]
        )
        self.add_widget(self.toolbar)
        
        # Create a GridLayout to hold the form fields
        self.form_layout = GridLayout(cols=1, padding=dp(16), spacing=dp(16))
        
        # Add form fields (example: Name, Department Name, Age, Staff Id, Number of Staffs)
        self.name_field = MDTextField(hint_text="Name")
        self.department_field = MDTextField(hint_text="Department Name")
        self.age_field = MDTextField(hint_text="Age")
        self.staff_id_field = MDTextField(hint_text="Staff Id")
        self.num_staffs_field = MDTextField(hint_text="Number of Staffs")
        
        # Add form fields to the layout
        self.form_layout.add_widget(self.name_field)
        self.form_layout.add_widget(self.department_field)
        self.form_layout.add_widget(self.age_field)
        self.form_layout.add_widget(self.staff_id_field)
        self.form_layout.add_widget(self.num_staffs_field)
        
        # Add a submit button
        self.submit_button = MDRaisedButton(text="Submit", on_press=self.submit_form)
        self.form_layout.add_widget(self.submit_button)
        
        # Add the form layout to the screen
        self.add_widget(self.form_layout)
        
    def submit_form(self, instance):
        # Retrieve data from form fields and store in the database
        name = self.name_field.text
        department = self.department_field.text
        age = self.age_field.text
        staff_id = self.staff_id_field.text
        num_staffs = self.num_staffs_field.text
        
        # Store data in the database or perform any other actions
        print("Form submitted:")
        print("Name:", name)
        print("Department:", department)
        print("Age:", age)
        print("Staff Id:", staff_id)
        print("Number of Staffs:", num_staffs)

class MyApp(MDApp):
    def build(self):
        db_manager = DatabaseManager("users.db")
        sm = ScreenManager()
        sm.add_widget(LoginScreen(db_manager, name='login'))
        sm.add_widget(RegistrationScreen(db_manager, name='registration'))
        sm.add_widget(ForgotPasswordScreen(db_manager, name='forgot_password'))
        sm.add_widget(HomeScreen(db_manager=db_manager, name='home'))
 # Add HomeScreen to ScreenManager
        return sm


if __name__ == '__main__':
    MyApp().run()

